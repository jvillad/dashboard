// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  name        String @id
  description String
  item        Item[]
}

model Item {
  id               Int       @id @default(autoincrement())
  name             String
  longDescription  String
  shortDescription String
  price            Int
  stock            String
  special          Boolean   @default(false)
  categoryId       String
  category         Category? @relation(fields: [categoryId], references: [name])
  imageUrls        String[]
  productSize      ProductSize[]
}

// -- Temp: Doing a testing to Item table. Removing relation until Item is final.
// model Image {
//   id                Int       @id @default(autoincrement())
//   url               String
//   itemId            Int       
//   item              Item      @relation(fields: [itemId], references: [id])
// }

model ProductSize {
  id            Int        @id @default(autoincrement())
  name          String
  price         Int
  productId     Int
  product       Item    @relation(fields: [productId], references: [id])
}

// model Grind {
//   id            Int        @id @default(autoincrement())
//   name          String
//   productId     Int
//   product       Product    @relation(fields: [productId], references: [id])
// }

// model Order {
//   id            Int        @id @default(autoincrement())
//   customerName  String
//   customerEmail String
//   products      OrderedProduct[]
//   total         Int
//   createdAt     DateTime   @default(now())
// }

// model OrderedProduct {
//   id            Int        @id @default(autoincrement())
//   productId     Int
//   product       Product    @relation(fields: [productId], references: [id])
//   sizeId        Int
//   size          ProductSize @relation(fields: [sizeId], references: [id])
//   grindId       Int
//   grind         Grind      @relation(fields: [grindId], references: [id])
//   quantity      Int
// }